pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/rammonty/upgrad_project.git'
        CLIENT_IMAGE_TAG = "movies-client:${BUILD_NUMBER}"
        SERVER_IMAGE_TAG = "movies-server:${BUILD_NUMBER}"
        CLIENT_DOCKERFILE_DIR = "movie-app/client"
        SERVER_DOCKERFILE_DIR = "movie-app/server"
        ECR_REPO_CLIENT = "upgrad/assignment-client"
        ECR_REPO_SERVER = "upgrad/assignment-server"
        APP_HOST = "172.31.17.88"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', credentialsId: 'git', url: "${REPO_URL}"
            }
        }

        stage('Build Docker Images') {
            parallel {
                stage('Build Client Image') {
                    steps {
                        script {
                            sh '''
                                cd ${CLIENT_DOCKERFILE_DIR}
                                # Build the client Docker image
                                docker build -t ${CLIENT_IMAGE_TAG} .
                                
                                # Authenticate Docker with ECR
                                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 639536574976.dkr.ecr.us-east-1.amazonaws.com
                                
                                # Tag the client image with ECR repository URL
                                docker tag ${CLIENT_IMAGE_TAG} ${ECR_REPO_CLIENT}:${BUILD_NUMBER}
                                
                                # Push the client image to ECR
                                docker push ${ECR_REPO_CLIENT}:${BUILD_NUMBER}
                            '''
                        }
                    }
                }
                stage('Build Server Image') {
                    steps {
                        script {
                            sh '''
                                cd ${SERVER_DOCKERFILE_DIR}
                                # Build the server Docker image
                                docker build -t ${SERVER_IMAGE_TAG} .
                                
                                # Authenticate Docker with ECR
                                aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 639536574976.dkr.ecr.us-east-1.amazonaws.com
                                
                                # Tag the server image with ECR repository URL
                                docker tag ${SERVER_IMAGE_TAG} ${ECR_REPO_SERVER}:${BUILD_NUMBER}
                                
                                # Push the server image to ECR
                                docker push ${ECR_REPO_SERVER}:${BUILD_NUMBER}
                            '''
                        }
                    }
                }
            }
        }

        stage('Deploy to App Host') {
            parallel {
                stage('Deploy Client Service') {
                    steps {
                        sshagent (credentials: ['app']) {
                            sh '''
                                # SSH into the app server
                                ssh root@${APP_HOST} '
                                # Stop the existing client container if it's running
                                docker ps -q --filter "ancestor=${ECR_REPO_CLIENT}:${BUILD_NUMBER}" | xargs -r docker stop
                                
                                # Remove old client containers
                                docker ps -a -q --filter "ancestor=${ECR_REPO_CLIENT}:${BUILD_NUMBER}" | xargs -r docker rm
                                
                                # Pull the new client Docker image from ECR
                                docker pull ${ECR_REPO_CLIENT}:${BUILD_NUMBER}
                                
                                # Run the new client Docker container
                                docker run -d -p 3000:3000 ${ECR_REPO_CLIENT}:${BUILD_NUMBER}
                                '
                            '''
                        }
                    }
                }
                stage('Deploy Server Service') {
                    steps {
                        sshagent (credentials: ['app']) {
                            sh '''
                                # SSH into the app server
                                ssh root@${APP_HOST} '
                                # Stop the existing server container if it's running
                                docker ps -q --filter "ancestor=${ECR_REPO_SERVER}:${BUILD_NUMBER}" | xargs -r docker stop
                                
                                # Remove old server containers
                                docker ps -a -q --filter "ancestor=${ECR_REPO_SERVER}:${BUILD_NUMBER}" | xargs -r docker rm
                                
                                # Pull the new server Docker image from ECR
                                docker pull ${ECR_REPO_SERVER}:${BUILD_NUMBER}
                                
                                # Run the new server Docker container
                                docker run -d -p 3001:3001 ${ECR_REPO_SERVER}:${BUILD_NUMBER}
                                '
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo 'Build, Publish, and Deployment Successful for both Client and Server!'
        }
        failure {
            echo 'Build Failed!'
        }
    }
}